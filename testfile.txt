pipeline {
    agent any

    environment {
        PATH ="/usr/share/maven:$PATH"
        mydockerimage = credentials("My_Image")
    }

    stages {
        
        stage("Build the code"){
            steps{
                sh "mvn --version"
                
                // made changes for attaining jacoco report for code coverage
                
                sh "mvn -f JavaMVC/pom.xml clean install "
                
                // for dependency vulnerabilities using owasp to check the cve's w.r.t NVD.
                
                sh "mvn -f 'JavaMVC/pom.xml' org.owasp:dependency-check-maven:check"
            }
            
        }
        
// ********************************************************************************************************//
        
        stage('Results of the code test') {
            steps {
            
            // running jacoco code coverage for analysis of code that got covered 
                junit"JavaMVC/target/surefire-reports/*.xml"
                jacoco()
            }
            
        }
        
// ********************************************************************************************************//

        stage('SonarQube analysis') {
        steps{
        withSonarQubeEnv('SonarQube1') { 
        // implimentation of sonarqube for checking different code qualities
        sh "mvn -f JavaMVC/pom.xml sonar:sonar -Dsonar.projectKey=pipeline_Assessment_5 -Dsonar.projectName=final_Assignment "
                }
            }
        }
        
// *******************************************************************************************************//

        stage ('Server') {
            steps {
              script { 
                 def server = Artifactory.server 'Artifactory'
                 def uploadSpec = """{
                    "files": [{
                       "pattern": "*.war",
                       "target": "final_Assignment/"
                    }]
                 }"""

                 server.upload(uploadSpec) 
               }
            }
        }
        
// *******************************************************************************************************//


        stage('create image for docker') {
            steps{
            
            // making a trivy image scan after creation of docker image
                sh 'docker build -t $mydockerimage  JavaMVC/ '
                sh 'trivy --timeout 10m image $mydockerimage --format json -o trivy-report.json '
                
            }
        }
        
// *******************************************************************************************************//
        stage('push image to docker hub'){
            steps{
                withCredentials([string(credentialsId: 'dockerhubpassword', variable: 'dockerhubpass')]) {
                sh 'docker login -u abhisheksingh26 -p ${dockerhubpass}'
}
                sh 'docker push abhisheksingh26/minor-assessment' 
            }
        }

// ******************************************************************************************************//        
        
        stage('Run the container'){
            steps{
                script{
                def docker_container = sh(returnStdout: true, script: 'docker ps -a -f name="MavenAssessment" -q')
                if(docker_container)
                     {
                sh "docker stop ${docker_container}"
                sh "docker rm --force ${docker_container}"
            }
        }
            sh 'docker run --name MavenAssessment -d -p 80:8080 abhisheksingh26/minor-assessment'
            sh "docker run -t owasp/zap2docker-stable zap-baseline.py -t http://192.168.56.101:80 || true"
            }
        }

// *******************************************************************************************************//

stage('Checking Docker Security') {
            steps{
            
            // scanning docker security
                sh 'cd ~/docker-bench-security ; sudo sh docker-bench-security.sh'
                
            }
        }

// *******************************************************************************************************//

stage('Logging into AWS ECR') {
            steps{
                script{
                docker.withRegistry('https://876724398547.dkr.ecr.us-east-2.amazonaws.com','ecr:us-east-2:foraws') {
                sh 'docker tag abhishek-fresher-training-devops:latest 876724398547.dkr.ecr.us-east-2.amazonaws.com/abhishek-fresher-training-devops:latest'
                sh 'docker push 876724398547.dkr.ecr.us-east-2.amazonaws.com/abhishek-fresher-training-devops:latest'
                }
                }
            }
        }

// *******************************************************************************************************//

        stage('Pulling and Running the image from ECR to EC2 instance'){
            steps{
               sh "ssh -i /var/lib/jenkins/abhisheksingh-devops-freshertraining.pem  ec2-user@18.116.98.226 'aws ecr get-login-password --region us-east-2 |sudo docker login --username AWS --password-stdin 876724398547.dkr.ecr.us-east-2.amazonaws.com' "
               sh "ssh -i /var/lib/jenkins/abhisheksingh-devops-freshertraining.pem  ec2-user@18.116.98.226 'sudo docker run --name abhishek_ec2dep -d -p 80:8080 876724398547.dkr.ecr.us-east-2.amazonaws.com/abhishek-fresher-training-devops:latest '"
                
            }
        }

// *******************************************************************************************************//

    }
}
